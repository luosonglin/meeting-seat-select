{"remainingRequest":"/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/babel-loader/lib/index.js!/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue","mtime":1648436470448},{"path":"/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/babel.config.js","mtime":1648432846399},{"path":"/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/cache-loader/dist/cjs.js","mtime":1648432830861},{"path":"/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/babel-loader/lib/index.js","mtime":1648432831402},{"path":"/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/cache-loader/dist/cjs.js","mtime":1648432830861},{"path":"/Users/stark/Projects/科学城集团/会议室选座/meeting-seat-select/node_modules/vue-loader/lib/index.js","mtime":1648432831130}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AAEA;AAEA;AAEA;AACAA,uBADA;AAEAC;AACAC;AACAC,kBADA;AAEAC;AAAA;AAAA;AAFA;AADA,GAFA;AAQAC,MARA,kBAQA;AACA;AACA;AACAC,yDADA;AAEAC,yDAFA;AAIAC,cAJA;AAKAC,eALA;AAOAC;AACA;AACA;AACA;AACA;AACA;AACAC,gBANA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACAC,sCAbA;;AAcA;AACA;AACA;AACA;AACA;AACAC,sBAnBA;;AAoBA;AACA;AACA;AACA;AACA;AACAC,oBAzBA;;AA0BA;AACA;AACA;AACA;AACA;AACAC,wBA/BA;;AAgCA;AACA;AACA;AACA;AACA;AACAC,yBArCA;;AAsCA;AACA;AACA;AACA;AACA;AACAC,uBA3CA;;AA4CA;AACA;AACA;AACA;AACA;AACA;AACAC,4BAlDA;;AAmDA;AACA;AACA;AACA;AACA;AACAC;AAxDA,OAPA;AAkEAC;AAlEA;AAoEA,GA9EA;AA+EAC;AACAC,aADA,uBACA;AACA;AAAA;AAEA;AAEA;AAEA;AACA,KATA;AAUAC,cAVA,wBAUA;AACA;AAAA;AAEA;AAEA;AAEA;AACA,KAlBA;AAmBAC,UAnBA,oBAmBA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA,iCACAX,uBADA,eACAY,UADA,uBAEAZ,wCAFA,eAEAY,kBAFA;AAIA,KAlCA;AAmCAC,iBAnCA,2BAmCA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA,KA3CA;AA4CAC,kBA5CA,4BA4CA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA,KAxDA;AAyDAC,oBAzDA,8BAyDA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA,KAjEA;AAkEAC,iBAlEA,2BAkEA;AACA;AAEA;AAEA;AAEA;AACA,KA1EA;AA2EAC,WA3EA,qBA2EA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AAnFA,GA/EA;AAoKAC;AACA7B,UADA,oBACA;AACA;AAEA8B;AACA;AALA,GApKA;AA2KAC;AACAC,QADA,kBACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,sBADA,GACA,KADA,CACAA,MADA,EACAjC,MADA,GACA,KADA,CACAA,MADA,EACA8B,WADA,GACA,KADA,CACAA,WADA;AAAA;AAAA,uBAGAG,QAHA;;AAAA;AAAA,oBAKAjC,MALA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOA8B;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,KATA;AAUAG,UAVA,oBAUA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACAC,yBADA,GACA,MADA,CACAA,SADA,EACAC,KADA,GACA,MADA,CACAA,KADA;AAAA;AAAA,uBAGAD,WAHA;;AAAA;AAAA,qCAKAC,qBALA,EAKAC,WALA,sBAKAA,WALA,EAKAC,YALA,sBAKAA,YALA;AAOA;AACA;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,KAnBA;AAoBAP,eApBA,yBAoBA;AACA;AAAA;AAEA;AACA;AAxBA,GA3KA;AAqMAQ,SArMA,qBAqMA;AACA;AAEAN;AACA;AAzMA","names":["name","props","config","type","default","data","gradientId1","gradientId2","width","height","defaultConfig","value","colors","borderWidth","borderGap","lineDash","textColor","borderRadius","localGradient","formatter","mergedConfig","computed","rectWidth","rectHeight","points","halfHeight","polylineWidth","linearGradient","polylineGradient","gradient2XPos","details","watch","mergeConfig","methods","init","initWH","$nextTick","$refs","clientWidth","clientHeight","mounted"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/percentPond/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const { clientWidth, clientHeight } = $refs['percent-pond']\n\n      this.width = clientWidth\n      this.height = clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"]}]}